// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const addTodo = `-- name: AddTodo :one
INSERT INTO todos (
    id
) VALUES (
    NULL
)
RETURNING id
`

func (q *Queries) AddTodo(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, addTodo)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteTodoById = `-- name: DeleteTodoById :exec
DELETE FROM todos
WHERE id = ?
`

func (q *Queries) DeleteTodoById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodoById, id)
	return err
}

const getTodoById = `-- name: GetTodoById :one
SELECT id FROM todos
WHERE id = ?
`

func (q *Queries) GetTodoById(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTodoById, id)
	err := row.Scan(&id)
	return id, err
}

const getTodos = `-- name: GetTodos :many
SELECT id FROM todos
`

func (q *Queries) GetTodos(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
